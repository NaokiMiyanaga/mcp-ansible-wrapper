# IETF-style master design (single source of truth)
# - Topology: RFC 8345-like (ietf-network / ietf-network-topology)
# - Extensions: Put FRR/Compose-specific attributes under `operational:*`
#   to avoid conflicts with strict validators.

ietf-network:networks:
  network:
    # Service plane (BGP peering path)
    - network-id: service-plane
      node:
        - node-id: r1
          ietf-network-topology:termination-point:
            - tp-id: r1-svc
              # Compose mapping: docker network `labnet`, r1 IP
              operational:ipv4: 10.0.0.1/24
        - node-id: r2
          ietf-network-topology:termination-point:
            - tp-id: r2-svc
              # Compose mapping: docker network `labnet`, r2 IP
              operational:ipv4: 10.0.0.2/24
      ietf-network-topology:link:
        - link-id: svc-r1-r2
          ietf-network-topology:source: { source-node: r1, source-tp: r1-svc }
          ietf-network-topology:destination: { dest-node: r2, dest-tp: r2-svc }

    # Management plane (Router-ID / SNMP reachability scope)
    - network-id: management-plane
      node:
        - node-id: r1
          ietf-network-topology:termination-point:
            - tp-id: r1-mgmt
              operational:ipv4: 192.168.0.1/24
        - node-id: r2
          ietf-network-topology:termination-point:
            - tp-id: r2-mgmt
              operational:ipv4: 192.168.0.2/24
        - node-id: l2a
          ietf-network-topology:termination-point:
            - tp-id: l2a-mgmt
              operational:ipv4: 192.168.0.11/24
        - node-id: l2b
          ietf-network-topology:termination-point:
            - tp-id: l2b-mgmt
              operational:ipv4: 192.168.0.12/24
      ietf-network-topology:link:
        - link-id: mgmt-r1-r2
          ietf-network-topology:source: { source-node: r1, source-tp: r1-mgmt }
          ietf-network-topology:destination: { dest-node: r2, dest-tp: r2-mgmt }
        - link-id: mgmt-r1-l2a
          ietf-network-topology:source: { source-node: r1, source-tp: r1-mgmt }
          ietf-network-topology:destination: { dest-node: l2a, dest-tp: l2a-mgmt }
        - link-id: mgmt-r1-l2b
          ietf-network-topology:source: { source-node: r1, source-tp: r1-mgmt }
          ietf-network-topology:destination: { dest-node: l2b, dest-tp: l2b-mgmt }
        - link-id: mgmt-r2-l2a
          ietf-network-topology:source: { source-node: r2, source-tp: r2-mgmt }
          ietf-network-topology:destination: { dest-node: l2a, dest-tp: l2a-mgmt }
        - link-id: mgmt-r2-l2b
          ietf-network-topology:source: { source-node: r2, source-tp: r2-mgmt }
          ietf-network-topology:destination: { dest-node: l2b, dest-tp: l2b-mgmt }

    # Data plane segments (VLANs modeled as separate networks; no L2 link between L2A and L2B)
    - network-id: vlan10
      node:
        - node-id: r1
          ietf-network-topology:termination-point:
            - tp-id: r1-vlan10
              operational:role: svi
              operational:ipv4: 10.0.10.1/24
        - node-id: l2a
          ietf-network-topology:termination-point:
            - tp-id: l2a-vlan10
              operational:role: access-port
              operational:vlan: 10
        - node-id: h10
          ietf-network-topology:termination-point:
            - tp-id: h10-eth0
              operational:role: host
              operational:ipv4: 10.0.10.100/24
      ietf-network-topology:link:
        - link-id: vlan10-h10-l2a
          ietf-network-topology:source: { source-node: h10, source-tp: h10-eth0 }
          ietf-network-topology:destination: { dest-node: l2a, dest-tp: l2a-vlan10 }
        - link-id: vlan10-l2a-r1
          ietf-network-topology:source: { source-node: l2a, source-tp: l2a-vlan10 }
          ietf-network-topology:destination: { dest-node: r1, dest-tp: r1-vlan10 }

    - network-id: vlan20
      node:
        - node-id: r2
          ietf-network-topology:termination-point:
            - tp-id: r2-vlan20
              operational:role: svi
              operational:ipv4: 10.0.20.1/24
        - node-id: l2b
          ietf-network-topology:termination-point:
            - tp-id: l2b-vlan20
              operational:role: access-port
              operational:vlan: 20
        - node-id: h20
          ietf-network-topology:termination-point:
            - tp-id: h20-eth0
              operational:role: host
              operational:ipv4: 10.0.20.100/24
      ietf-network-topology:link:
        - link-id: vlan20-h20-l2b
          ietf-network-topology:source: { source-node: h20, source-tp: h20-eth0 }
          ietf-network-topology:destination: { dest-node: l2b, dest-tp: l2b-vlan20 }
        - link-id: vlan20-l2b-r2
          ietf-network-topology:source: { source-node: l2b, source-tp: l2b-vlan20 }
          ietf-network-topology:destination: { dest-node: r2, dest-tp: r2-vlan20 }

  # Global operational attributes (non-IETF keys for FRR/Compose mapping)
  operational:
    addressing:
      management:
        ipv4_subnet: 192.168.0.0/24
      service:
        ipv4_subnet: 10.0.0.0/24

    bgp:
      asn:
        r1: 65001
        r2: 65002
      router_id:
        r1: 192.168.0.1
        r2: 192.168.0.2
      # Explicit peering (maps to PEER_IP / neighbor remote-as)
      peering:
        - a: r1
          z: r2
          a_tp: r1-svc
          z_tp: r2-svc

    vlans:
      - vlan-id: 10
        ipv4_subnet: 10.0.10.0/24
        svi:
          node: r1
          address: 10.0.10.1/24
      - vlan-id: 20
        ipv4_subnet: 10.0.20.0/24
        svi:
          node: r2
          address: 10.0.20.1/24

    snmp:
      rocommunity: public

    compose-mapping:
      # Docker network names corresponding to each plane
      networks:
        service: labnet
        management: mgmtnet
        vlan10: vlan10
        vlan20: vlan20

    # L2 switch intent and control backend policy
    l2sw:
      backend: docker-bridge  # options: docker-bridge | linux-bridge | ovs
      data_plane_trunk: false  # no direct L2 link between L2A and L2B
      nodes:
        - id: l2a
          description: L2 switch A (mgmt on mgmtnet)
          ports:
            - name: access-h10
              type: access
              access_vlan: 10
        - id: l2b
          description: L2 switch B (mgmt on mgmtnet)
          ports:
            - name: access-h20
              type: access
              access_vlan: 20

    # MCP (controller) strategy
    mcp:
      northbound: file-sot  # file-sot | api
      southbound:
        docker-bridge:
          method: compose-overlay  # generate compose overlays from SoT
        linux-bridge:
          method: ansible-or-python
          notes: requires NET_ADMIN and internal bridging in container
        ovs:
          method: ovsdb (ovs-vsctl / ovsdbapp)
          notes: enables true trunks/access; higher fidelity

# Notes
# - Treat this file as the authoritative master. Keep docker-compose overlays
#   and IETF examples in sync with it.
# - "operational:*" keys are intentionally non-standard to pass strict schema validation.
# - If you prefer to validate using JSON Schema, convert to JSON first and ignore `operational:*`.
