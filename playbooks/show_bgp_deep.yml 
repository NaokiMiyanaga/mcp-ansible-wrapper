---
- name: deep bgp ops for {{ host | default(inventory_hostname) }}
  hosts: "{{ host | default('all') }}"
  gather_facts: no
  vars:
    want_afis: ["ipv4 unicast"]    # 必要なら ["ipv4 unicast","ipv6 unicast"] 等に
  tasks:
    - name: Detect FRR (vtysh)
      ansible.builtin.command: which vtysh
      register: which_vtysh
      changed_when: false
      failed_when: false

    - name: BGP summary (FRR, JSON)
      ansible.builtin.command: vtysh -c "show bgp summary json"
      register: frr_sum_raw
      changed_when: false
      when: which_vtysh.rc == 0

    - name: Parse FRR summary
      ansible.builtin.set_fact:
        frr_sum: "{{ frr_sum_raw.stdout | from_json }}"
      when: which_vtysh.rc == 0

    - name: Collect AFI/SAFI details (FRR, JSON)
      ansible.builtin.command: vtysh -c "show bgp {{ item }} summary json"
      loop: "{{ want_afis }}"
      loop_control: { label: "{{ item }}" }
      register: frr_afi_raw
      changed_when: false
      when: which_vtysh.rc == 0

    - name: Parse AFI/SAFI summaries
      ansible.builtin.set_fact:
        frr_afi: >-
          {{
            dict((item.item, (item.stdout | from_json)))
            for item in frr_afi_raw.results
          }}
      when: which_vtysh.rc == 0

    - name: Build FRR neighbor/route report
      ansible.builtin.set_fact:
        bgp_report:
          impl: "frr"
          router_id: "{{ frr_sum.routerId | default(frr_sum.routerIdV4) }}"
          peers_total: "{{ (frr_sum.peers | default({})) | length }}"
          peers_established: >-
            {{
              (frr_sum.peers | dict2items | selectattr('value.state','equalto','Established') | list) | length
            }}
          peers_down: >-
            {{
              (frr_sum.peers | dict2items | rejectattr('value.state','equalto','Established') | list) | length
            }}
          down_list: >-
            {{
              (frr_sum.peers | dict2items
                | rejectattr('value.state','equalto','Established')
                | map(attribute='key') | list)
            }}
          afi: >-
            {{
              dict((k, {
                'accepted_paths': (v.acceptedPaths | default(0)),
                'received_paths': (v.receivedPaths | default(0)),
                'installed_paths': (v.installedPaths | default(0)),
                'rib_count': (v.paths | default(0))
              }) for k,v in (frr_afi | default({})).items())
            }}
      when: which_vtysh.rc == 0

    # ---- Cisco IOS (簡易フォールバック) ----
    - name: BGP summary (Cisco IOS)
      when: which_vtysh.rc != 0
      vars:
        ansible_network_os: ios
      cisco.ios.ios_command:
        commands:
          - show ip bgp summary
      register: ios_sum
      changed_when: false
      failed_when: false

    - name: Parse IOS summary (rough)
      when: which_vtysh.rc != 0
      ansible.builtin.set_fact:
        bgp_report:
          impl: "ios"
          summary_text: "{{ ios_sum.stdout[0] }}"
          # ざっくり抽出（Established行カウントなど簡易）
          peers_established: "{{ (ios_sum.stdout[0] | regex_findall(' Estab| [0-9]+:[0-9]+:.. ')) | length }}"
          peers_total: "{{ (ios_sum.stdout[0].splitlines() | select('match','^ *[0-9.]+') | list) | length }}"
          peers_down: "{{ (bgp_report.peers_total | default(0)) - (bgp_report.peers_established | default(0)) }}"

    # ---- 出力（MCPが拾えるようJSONと人間向け本文を両方） ----
    - name: Human summary
      ansible.builtin.debug:
        msg: |-
          BGP状態: {{ inventory_hostname }}
          - 実装: {{ bgp_report.impl }}
          - ピア総数: {{ bgp_report.peers_total | default('n/a') }}
          - Established: {{ bgp_report.peers_established | default('n/a') }}
          - Down: {{ bgp_report.peers_down | default('n/a') }}
          {% if bgp_report.down_list is defined and bgp_report.down_list %}
          - Downピア: {{ bgp_report.down_list | join(', ') }}
          {% endif %}
          {% if bgp_report.afi is defined %}
          - AFI/SAFI:
          {% for k,v in bgp_report.afi.items() %}
            * {{ k }}: accepted={{ v.accepted_paths }}, received={{ v.received_paths }}, installed={{ v.installed_paths }}, rib={{ v.rib_count }}
          {% endfor %}
          {% endif %}

    - name: Machine summary (JSON for MCP)
      ansible.builtin.debug:
        msg: "{{ bgp_report | to_json }}"