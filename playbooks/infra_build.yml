---
- name: Build lab infra (networks/containers) from policy
  hosts: localhost
  gather_facts: false
  vars:
    # Defaults (can be overridden via extra vars)
    create_containers: false
    frr_image: "frrouting/frr:8.4.4"
    l2_image: "debian:bookworm-slim"
    host_image: "alpine:3.19"
  tasks:
    - name: Assert required variables exist
      ansible.builtin.assert:
        that:
          - mgmt_subnet is defined and mgmt_subnet != ''
          - svc_subnet is defined and svc_subnet != ''
          - compose_networks is defined
        fail_msg: "Missing mgmt/service subnet or compose_networks in extra vars"

    - name: Derive compose network names
      ansible.builtin.set_fact:
        net_mgmt: "{{ (compose_networks.management | default('mgmtnet')) }}"
        net_svc: "{{ (compose_networks.service | default('labnet')) }}"

    - name: Create management network
      community.docker.docker_network:
        name: "{{ net_mgmt }}"
        ipam_config:
          - subnet: "{{ mgmt_subnet }}"
        state: present

    - name: Create service network
      community.docker.docker_network:
        name: "{{ net_svc }}"
        ipam_config:
          - subnet: "{{ svc_subnet }}"
        state: present

    - name: Build VLAN network list
      ansible.builtin.set_fact:
        vlan_items: "{{ vlans_meta | dict2items }}"

    - name: Create VLAN networks
      community.docker.docker_network:
        name: "{{ compose_networks.get('vlan' ~ item.key, 'vlan' ~ item.key) }}"
        ipam_config:
          - subnet: "{{ item.value.ipv4_subnet }}"
        state: present
      loop: "{{ vlan_items }}"
      loop_control:
        label: "vlan{{ item.key }} => {{ item.value.ipv4_subnet }}"

    - name: Containers creation notice
      ansible.builtin.debug:
        msg: "Container creation is disabled by default. Use --create-containers to enable."
      when: not create_containers | bool

    - name: Create/Update router containers (r1, r2)
      when: create_containers | bool
      community.docker.docker_container:
        name: "{{ item.name }}"
        image: "{{ frr_image }}"
        restart_policy: always
        state: started
        privileged: false
        capabilities:
          - NET_ADMIN
        networks:
          - name: "{{ net_mgmt }}"
            ipv4_address: "{{ mgmt_ip[item.name] }}"
          - name: "{{ net_svc }}"
            ipv4_address: "{{ svc_ip[item.name] }}"
          - name: "{{ compose_networks.get(item.vlan_net, item.vlan_net) }}"
            ipv4_address: "{{ item.vlan_ip }}"
      loop:
        - { name: "r1", vlan_net: "vlan10", vlan_ip: "10.0.10.1" }
        - { name: "r2", vlan_net: "vlan20", vlan_ip: "10.0.20.1" }
      loop_control:
        label: "{{ item.name }}"

    - name: Create/Update L2 switch containers (l2a, l2b)
      when: create_containers | bool
      community.docker.docker_container:
        name: "{{ item.name }}"
        image: "{{ l2_image }}"
        command: ["bash", "-lc", "sleep infinity"]
        restart_policy: always
        state: started
        capabilities:
          - NET_ADMIN
        networks:
          - name: "{{ net_mgmt }}"
            ipv4_address: "{{ mgmt_ip[item.name] }}"
          - name: "{{ compose_networks.get(item.vlan_net, item.vlan_net) }}"
      loop:
        - { name: "l2a", vlan_net: "vlan10" }
        - { name: "l2b", vlan_net: "vlan20" }
      loop_control:
        label: "{{ item.name }}"

    - name: Create/Update host containers (h10, h20)
      when: create_containers | bool
      community.docker.docker_container:
        name: "{{ item.name }}"
        image: "{{ host_image }}"
        command: ["sh", "-c", "sleep infinity"]
        restart_policy: always
        state: started
        networks:
          - name: "{{ compose_networks.get(item.vlan_net, item.vlan_net) }}"
      loop:
        - { name: "h10", vlan_net: "vlan10" }
        - { name: "h20", vlan_net: "vlan20" }
      loop_control:
        label: "{{ item.name }}"
